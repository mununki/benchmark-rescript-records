let domProps: DomProps.domProps = {
  key: "",
  /* accessibility */
  /* https://www.w3.org/TR/wai-aria-1.1/ */
  /* https://accessibilityresources.org/<aria-tag> is a great resource for these */

  ariaCurrent: #page,
  ariaDetails: "",
  ariaDisabled: true,
  ariaHidden: true,
  ariaInvalid: #grammar,
  ariaKeyshortcuts: "",
  ariaLabel: "",
  ariaRoledescription: "",
  /* Widget Attributes */
  ariaAutocomplete: #inline,
  /* https://www.w3.org/TR/wai-aria-1.1/#valuetype_tristate */

  ariaChecked: #"true",
  ariaExpanded: true,
  ariaHaspopup: #menu,
  ariaLevel: 0,
  ariaModal: true,
  ariaMultiline: true,
  ariaMultiselectable: true,
  ariaOrientation: #horizontal,
  ariaPlaceholder: "",
  /* https://www.w3.org/TR/wai-aria-1.1/#valuetype_tristate */
  ariaPressed: #"true",
  ariaReadonly: true,
  ariaRequired: true,
  ariaSelected: true,
  ariaSort: "",
  ariaValuemax: 0.,
  ariaValuemin: 0.,
  ariaValuenow: 0.,
  ariaValuetext: "",
  /* Live Region Attributes */

  ariaAtomic: true,
  ariaBusy: true,
  ariaLive: #off,
  ariaRelevant: "",
  /* Drag-and-Drop Attributes */
  ariaDropeffect: #copy,
  ariaGrabbed: true,
  /* Relationship Attributes */

  ariaActivedescendant: "",
  ariaColcount: 0,
  ariaColindex: 0,
  ariaColspan: 0,
  ariaControls: "",
  ariaDescribedby: "",
  ariaErrormessage: "",
  ariaFlowto: "",
  ariaLabelledby: "",
  ariaOwns: "",
  ariaPosinset: 0,
  ariaRowcount: 0,
  ariaRowindex: 0,
  ariaRowspan: 0,
  ariaSetsize: 0,
  /* react textarea/input */
  defaultChecked: true,
  defaultValue: "",
  /* global html attributes */
  accessKey: "",
  className: "" /* substitute for "class" */,
  contentEditable: true,
  contextMenu: "",
  dataTestId: "",
  dir: "" /* "ltr", "rtl" or "auto" */,
  draggable: true,
  hidden: true,
  id: "",
  lang: "",
  role: "" /* ARIA role */,
  spellCheck: true,
  tabIndex: 0,
  title: "",
  /* html5 microdata */
  itemID: "",
  itemProp: "",
  itemRef: "",
  itemScope: true,
  itemType: "" /* uri */,
  /* tag-specific html attributes */
  accept: "",
  acceptCharset: "",
  action: "" /* uri */,
  allowFullScreen: true,
  alt: "",
  as_: "",
  async: true,
  autoComplete: "" /* has a fixed, but large-ish, set of possible values */,
  autoCapitalize: "" /* Mobile Safari specific */,
  autoFocus: true,
  autoPlay: true,
  challenge: "",
  charSet: "",
  checked: true,
  cite: "" /* uri */,
  crossOrigin: "" /* anonymous, use-credentials */,
  cols: 0,
  colSpan: 0,
  content: "",
  controls: true,
  coords: "" /* set of values specifying the coordinates of a region */,
  data: "" /* uri */,
  dateTime: "" /* "valid date string with optional time" */,
  default: true,
  defer: true,
  disabled: true,
  download: "" /* should really be either a boolean, signifying presence, or a string */,
  encType: "" /* "application/x-www-form-urlencoded", "multipart/form-data" or "text/plain" */,
  form: "",
  formAction: "" /* uri */,
  formTarget: "" /* "_blank", "_self", etc. */,
  formMethod: "" /* "post", "get", "put" */,
  headers: "",
  height: "" /* in html5 this can only be a number, but in html4 it can ba a percentage as well */,
  high: 0,
  href: "" /* uri */,
  hrefLang: "",
  htmlFor: "" /* substitute for "for" */,
  httpEquiv: "" /* has a fixed set of possible values */,
  icon: "" /* uri? */,
  inputMode: "" /* "verbatim", "latin", "numeric", etc. */,
  integrity: "",
  keyType: "",
  kind: "" /* has a fixed set of possible values */,
  label: "",
  list: "",
  loading: #"lazy",
  loop: true,
  low: 0,
  manifest: "" /* uri */,
  max: "" /* should be int or Js.Date.t */,
  maxLength: 0,
  media: "" /* a valid media query */,
  mediaGroup: "",
  method: "" /* "post" or "get" */,
  min: "",
  minLength: 0,
  multiple: true,
  muted: true,
  name: "",
  nonce: "",
  noValidate: true,
  open_: true /* use this one. Previous one is deprecated */,
  optimum: 0,
  pattern: "" /* valid Js RegExp */,
  placeholder: "",
  playsInline: true,
  poster: "" /* uri */,
  preload: "" /* "none", "metadata" or "auto" (and "" as a synonym for "auto") */,
  radioGroup: "",
  readOnly: true,
  rel: "" /* a space- or comma-separated (depending on the element) list of a fixed set of "link types" */,
  required: true,
  reversed: true,
  rows: 0,
  rowSpan: 0,
  sandbox: "" /* has a fixed set of possible values */,
  scope: "" /* has a fixed set of possible values */,
  scoped: true,
  scrolling: "" /* html4 only, "auto", "yes" or "no" */,
  /* seamless - supported by React, but removed from the html5 spec */
  selected: true,
  shape: "",
  size: 0,
  sizes: "",
  span: 0,
  src: "" /* uri */,
  srcDoc: "",
  srcLang: "",
  srcSet: "",
  start: 0,
  step: 0.,
  summary: "" /* deprecated */,
  target: "",
  type_: "" /* has a fixed but large-ish set of possible values */ /* use this one. Previous one is deprecated */,
  useMap: "",
  value: "",
  width: "" /* in html5 this can only be a number, but in html4 it can ba a percentage as well */,
  wrap: "" /* "hard" or "soft" */,
  /* Clipboard events */
  onCopy: _ => (),
  onCut: _ => (),
  onPaste: _ => (),
  /* Composition events */
  onCompositionEnd: _ => (),
  onCompositionStart: _ => (),
  onCompositionUpdate: _ => (),
  /* Keyboard events */
  onKeyDown: _ => (),
  onKeyPress: _ => (),
  onKeyUp: _ => (),
  /* Focus events */
  onFocus: _ => (),
  onBlur: _ => (),
  /* Form events */
  onBeforeInput: _ => (),
  onChange: _ => (),
  onInput: _ => (),
  onReset: _ => (),
  onSubmit: _ => (),
  onInvalid: _ => (),
  /* Mouse events */
  onClick: _ => (),
  onContextMenu: _ => (),
  onDoubleClick: _ => (),
  onDrag: _ => (),
  onDragEnd: _ => (),
  onDragEnter: _ => (),
  onDragExit: _ => (),
  onDragLeave: _ => (),
  onDragOver: _ => (),
  onDragStart: _ => (),
  onDrop: _ => (),
  onMouseDown: _ => (),
  onMouseEnter: _ => (),
  onMouseLeave: _ => (),
  onMouseMove: _ => (),
  onMouseOut: _ => (),
  onMouseOver: _ => (),
  onMouseUp: _ => (),
  /* Selection events */
  onSelect: _ => (),
  /* Touch events */
  onTouchCancel: _ => (),
  onTouchEnd: _ => (),
  onTouchMove: _ => (),
  onTouchStart: _ => (),
  // Pointer events
  onPointerOver: _ => (),
  onPointerEnter: _ => (),
  onPointerDown: _ => (),
  onPointerMove: _ => (),
  onPointerUp: _ => (),
  onPointerCancel: _ => (),
  onPointerOut: _ => (),
  onPointerLeave: _ => (),
  onGotPointerCapture: _ => (),
  onLostPointerCapture: _ => (),
  /* UI events */
  onScroll: _ => (),
  /* Wheel events */
  onWheel: _ => (),
  /* Media events */
  onAbort: _ => (),
  onCanPlay: _ => (),
  onCanPlayThrough: _ => (),
  onDurationChange: _ => (),
  onEmptied: _ => (),
  onEncrypted: _ => (),
  onEnded: _ => (),
  onError: _ => (),
  onLoadedData: _ => (),
  onLoadedMetadata: _ => (),
  onLoadStart: _ => (),
  onPause: _ => (),
  onPlay: _ => (),
  onPlaying: _ => (),
  onProgress: _ => (),
  onRateChange: _ => (),
  onSeeked: _ => (),
  onSeeking: _ => (),
  onStalled: _ => (),
  onSuspend: _ => (),
  onTimeUpdate: _ => (),
  onVolumeChange: _ => (),
  onWaiting: _ => (),
  /* Image events */
  onLoad: _ => () /* duplicate */ /* ~onError: ReactEvent.Image.t => unit=?, */,
  /* Animation events */
  onAnimationStart: _ => (),
  onAnimationEnd: _ => (),
  onAnimationIteration: _ => (),
  /* Transition events */
  onTransitionEnd: _ => (),
  /* svg */
  accentHeight: "",
  accumulate: "",
  additive: "",
  alignmentBaseline: "",
  allowReorder: "",
  alphabetic: "",
  amplitude: "",
  arabicForm: "",
  ascent: "",
  attributeName: "",
  attributeType: "",
  autoReverse: "",
  azimuth: "",
  baseFrequency: "",
  baseProfile: "",
  baselineShift: "",
  bbox: "",
  begin: "",
  begin_: "",
  bias: "",
  by: "",
  calcMode: "",
  capHeight: "",
  clip: "",
  clipPath: "",
  clipPathUnits: "",
  clipRule: "",
  colorInterpolation: "",
  colorInterpolationFilters: "",
  colorProfile: "",
  colorRendering: "",
  contentScriptType: "",
  contentStyleType: "",
  cursor: "",
  cx: "",
  cy: "",
  d: "",
  decelerate: "",
  descent: "",
  diffuseConstant: "",
  direction: "",
  display: "",
  divisor: "",
  dominantBaseline: "",
  dur: "",
  dx: "",
  dy: "",
  edgeMode: "",
  elevation: "",
  enableBackground: "",
  end: "",
  end_: "",
  exponent: "",
  externalResourcesRequired: "",
  fill: "",
  fillOpacity: "",
  fillRule: "",
  filter: "",
  filterRes: "",
  filterUnits: "",
  floodColor: "",
  floodOpacity: "",
  focusable: "",
  fontFamily: "",
  fontSize: "",
  fontSizeAdjust: "",
  fontStretch: "",
  fontStyle: "",
  fontVariant: "",
  fontWeight: "",
  fomat: "",
  from: "",
  fx: "",
  fy: "",
  g1: "",
  g2: "",
  glyphName: "",
  glyphOrientationHorizontal: "",
  glyphOrientationVertical: "",
  glyphRef: "",
  gradientTransform: "",
  gradientUnits: "",
  hanging: "",
  horizAdvX: "",
  horizOriginX: "",
  ideographic: "",
  imageRendering: "",
  in_: "" /* use this one. Previous one is deprecated */,
  in2: "",
  intercept: "",
  k: "",
  k1: "",
  k2: "",
  k3: "",
  k4: "",
  kernelMatrix: "",
  kernelUnitLength: "",
  kerning: "",
  keyPoints: "",
  keySplines: "",
  keyTimes: "",
  lengthAdjust: "",
  letterSpacing: "",
  lightingColor: "",
  limitingConeAngle: "",
  local: "",
  markerEnd: "",
  markerHeight: "",
  markerMid: "",
  markerStart: "",
  markerUnits: "",
  markerWidth: "",
  mask: "",
  maskContentUnits: "",
  maskUnits: "",
  mathematical: "",
  mode: "",
  numOctaves: "",
  offset: "",
  opacity: "",
  operator: "",
  order: "",
  orient: "",
  orientation: "",
  origin: "",
  overflow: "",
  overflowX: "",
  overflowY: "",
  overlinePosition: "",
  overlineThickness: "",
  paintOrder: "",
  panose1: "",
  pathLength: "",
  patternContentUnits: "",
  patternTransform: "",
  patternUnits: "",
  pointerEvents: "",
  points: "",
  pointsAtX: "",
  pointsAtY: "",
  pointsAtZ: "",
  preserveAlpha: "",
  preserveAspectRatio: "",
  primitiveUnits: "",
  r: "",
  radius: "",
  refX: "",
  refY: "",
  renderingIntent: "",
  repeatCount: "",
  repeatDur: "",
  requiredExtensions: "",
  requiredFeatures: "",
  restart: "",
  result: "",
  rotate: "",
  rx: "",
  ry: "",
  scale: "",
  seed: "",
  shapeRendering: "",
  slope: "",
  spacing: "",
  specularConstant: "",
  specularExponent: "",
  speed: "",
  spreadMethod: "",
  startOffset: "",
  stdDeviation: "",
  stemh: "",
  stemv: "",
  stitchTiles: "",
  stopColor: "",
  stopOpacity: "",
  strikethroughPosition: "",
  strikethroughThickness: "",
  string: "",
  stroke: "",
  strokeDasharray: "",
  strokeDashoffset: "",
  strokeLinecap: "",
  strokeLinejoin: "",
  strokeMiterlimit: "",
  strokeOpacity: "",
  strokeWidth: "",
  surfaceScale: "",
  systemLanguage: "",
  tableValues: "",
  targetX: "",
  targetY: "",
  textAnchor: "",
  textDecoration: "",
  textLength: "",
  textRendering: "",
  to: "",
  to_: "",
  transform: "",
  u1: "",
  u2: "",
  underlinePosition: "",
  underlineThickness: "",
  unicode: "",
  unicodeBidi: "",
  unicodeRange: "",
  unitsPerEm: "",
  vAlphabetic: "",
  vHanging: "",
  vIdeographic: "",
  vMathematical: "",
  values: "",
  vectorEffect: "",
  version: "",
  vertAdvX: "",
  vertAdvY: "",
  vertOriginX: "",
  vertOriginY: "",
  viewBox: "",
  viewTarget: "",
  visibility: "",
  /* width::string? => */
  widths: "",
  wordSpacing: "",
  writingMode: "",
  x: "",
  x1: "",
  x2: "",
  xChannelSelector: "",
  xHeight: "",
  xlinkActuate: "",
  xlinkArcrole: "",
  xlinkHref: "",
  xlinkRole: "",
  xlinkShow: "",
  xlinkTitle: "",
  xlinkType: "",
  xmlns: "",
  xmlnsXlink: "",
  xmlBase: "",
  xmlLang: "",
  xmlSpace: "",
  y: "",
  y1: "",
  y2: "",
  yChannelSelector: "",
  z: "",
  zoomAndPan: "",
  /* RDFa */
  about: "",
  datatype: "",
  inlist: "",
  prefix: "",
  property: "",
  resource: "",
  typeof: "",
  vocab: "",
  /* react-specific */
  dangerouslySetInnerHTML: {"__html": ""},
  suppressContentEditableWarning: true,
}
